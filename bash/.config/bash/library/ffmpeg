#!/usr/bin/env bash

# Approach and many presets adapted from: 
# - https://github.com/gotbletu/shownotes/blob/master/ffmpeg_x11grab_screencast.txt
# - https://blog.programster.org/ffmpeg-create-webp-animated-images

##########################################################
#
# GENERAL OPTIONS
#
##########################################################

# FFX_MONO="1"
# FFX_DUAL="2"
# FFX_HW="hw:1,0"
# FFX_AUDIO="pcm_s16le"

##########################################################
#
# WINDOW CAPTURE
#
# Prompts mouse cursor to select window you want to record
##########################################################

export-window-capture-constants() {
  export FFX_TEMP="/tmp/capture.mkv"
  export FFX_CRF="0"
  export FFX_FPS="25"
  export FFX_PRESET="ultrafast" # defaults to medium
  export FFX_THREADS="0"
}

# $1: output (optional, defaults to $FFX_TEMP)
ffmpeg-capture-winselect-no-audio() {
  export-window-capture-constants
  if [ -z "$1" ]; then FFX_OUTPUT="$FFX_TEMP"; else FFX_OUTPUT="$1"; fi
  printf "%s: %s\n" "Capture will be saved to:" "$FFX_OUTPUT"
  printf "Select the window you want to record:"
  FFX_INFO=$(xwininfo -frame)
  FFX_WIDTH=$(echo "$FFX_INFO" | grep 'Width' | awk '{print $2}')
  FFX_HEIGHT=$(echo "$FFX_INFO" | grep 'Height' | awk '{print $2}')
  FFX_SCALE="scale=$FFX_WIDTH:$FFX_HEIGHT"
  ffmpeg \
    -f x11grab -an \
    -r $FFX_FPS \
    -s "$(echo "$FFX_INFO" | grep -oEe 'geometry [0-9]+x[0-9]+' \
      | grep -oEe '[0-9]+x[0-9]+')" \
    -i ":0.0+$(echo "$FFX_INFO" | grep -oEe 'Corners:\s+\+[0-9]+\+[0-9]+' \
      | grep -oEe '[0-9]+\+[0-9]+' | sed -e 's/\+/,/' )" \
    -preset $FFX_PRESET -crf $FFX_CRF -threads $FFX_THREADS \
    -y "$FFX_OUTPUT"
}

##########################################################
#
# MP4 FOR WEB CONVERSION
#
# Inspired by:
# https://pixelpoint.io/blog/web-optimized-video-ffmpeg/
##########################################################

# $1 width
# $2 height
# $3 preset (optional, defaults to ultrafast. veryslow is the other useful option)
# $4 input (optional, defaults to $FFX_TMP)
# $5 output (optional, defaults to $FFX_OUTPUT_DIR)
ffmpeg-to-mp4() {
  FFX_INPUT="/tmp/capture.mkv"
  FFX_OUTPUT_DIR="$HOME/Videos/ffmpeg-casts"
  FFX_CRF="32"
  FFX_CODEC="libx265"
  FFX_WIDTH="$1"
  FFX_HEIGHT="$2"
  FFX_SCALE="scale=$FFX_WIDTH:$FFX_HEIGHT"
  FFX_OUTPUT="$FFX_OUTPUT_DIR/${FFX_WIDTH}x$FFX_HEIGHT-$(date +"%FT%H%M").mp4"
  if [ -n "$3" ]; then FFX_PRESET="$3"; fi
  if [ -n "$4" ]; then FFX_INPUT="$4"; fi
  if [ -n "$5" ]; then FFX_OUTPUT="$5"; fi
  printf "\nWorking directory:        \t %s\n" "$(pwd)"
  printf "Converting to .webm:      \t %s\n" "$FFX_INPUT"
  printf "Output will be saved to:  \t %s\n\n" "$FFX_OUTPUT"
  ffmpeg -an \
    -i "$FFX_INPUT" \
    -c:v $FFX_CODEC \
    -crf $FFX_CRF \
    -vf "$FFX_SCALE" \
    -preset "$FFX_PRESET" \
    -tag:v hvc1 \
    -movflags faststart \
    -f mp4 \
    -y "$FFX_OUTPUT"
}


##########################################################
#
# WEBM CONVERSION
#
##########################################################

# $1 width
# $2 height
# $3 deadline (optional, defaults to realtime. best is the other useful option)
# $4 input (optional, defaults to $FFX_TMP)
# $5 output (optional, defaults to $FFX_OUTPUT_DIR)
ffmpeg-to-webm() {
  FFX_INPUT="/tmp/capture.mkv"
  FFX_OUTPUT_DIR="$HOME/Videos/ffmpeg-casts"
  FFX_CRF="40"
  FFX_CODEC="libvpx-vp9"
  FFX_PRESET="realtime"
  FFX_WIDTH="$1"
  FFX_HEIGHT="$2"
  FFX_SCALE="scale=$FFX_WIDTH:$FFX_HEIGHT"
  FFX_OUTPUT="$FFX_OUTPUT_DIR/${FFX_WIDTH}x$FFX_HEIGHT-$(date +"%FT%H%M").webm"
  if [ -n "$3" ]; then FFX_PRESET="$3"; fi
  if [ -n "$4" ]; then FFX_INPUT="$4"; fi
  if [ -n "$5" ]; then FFX_OUTPUT="$5"; fi
  printf "\nWorking directory:        \t %s\n" "$(pwd)"
  printf "Converting to .webm:      \t %s\n" "$FFX_INPUT"
  printf "Output will be saved to:  \t %s\n\n" "$FFX_OUTPUT"
  ffmpeg -an \
    -i "$FFX_INPUT" \
    -c:v $FFX_CODEC \
    -crf $FFX_CRF \
    -vf "$FFX_SCALE" \
    -deadline "$FFX_PRESET" \
    -f webm \
    -y "$FFX_OUTPUT"
}
